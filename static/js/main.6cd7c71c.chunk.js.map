{"version":3,"sources":["components/ModalComponent.jsx","pages/MoviesList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["ModalComponent","modal","toggle","movie","Modal","isOpen","className","ModalHeader","name","ModalBody","title","width","height","src","key","frameBorder","allow","allowFullScreen","ModalFooter","Button","color","onClick","MoviesList","useState","setModal","setMovie","MovieItem","item","id","console","log","driveFolder","style","backgroundColor","poster_path","alt","a","async","fetch","result","json","resultJson","results","getTrailer","href","borderColor","target","rel","vote_average","movieData","map","index","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"q2nOA4BeA,EA1BQ,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MACvC,OACE,6BACE,kBAACC,EAAA,EAAD,CAAOC,OAAQJ,EAAOC,OAAQA,EAAQI,UAAU,gBAC9C,kBAACC,EAAA,EAAD,CAAaL,OAAQA,GAASC,EAAMK,MACpC,kBAACC,EAAA,EAAD,KACE,4BACEC,MAAOP,EAAMK,KACbG,MAAM,OACNC,OAAO,MACPC,IAAG,wCAAmCV,EAAMW,KAC5CC,YAAY,IACZC,MAAM,0EACNC,iBAAe,KAGnB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,YAAYC,QAASnB,GAAnC,oBCfK,SAASoB,IAAc,IAAD,EACTC,oBAAS,GADA,mBAC5BtB,EAD4B,KACrBuB,EADqB,OAETD,mBAAS,IAFA,mBAE5BpB,EAF4B,KAErBsB,EAFqB,KAG7BvB,EAAS,kBAAMsB,GAAUvB,IASzByB,EAAY,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAInB,OAHKA,EAAKC,IACRC,QAAQC,IAAIH,EAAKI,aAGjB,yBAAKzB,UAAU,YACb,yBAAKA,UAAU,OAAO0B,MAAO,CAAEC,gBAAiB,YAC9C,yBAAK3B,UAAU,cACb,yBACEO,IACEc,EAAKO,YAAL,yDACsDP,EAAKO,aACvD,GAEN5B,UAAU,eACV6B,IAAKR,EAAKC,MAGd,yBAAKtB,UAAU,gBACb,kBAACa,EAAA,EAAD,CACEb,UAAU,OACVc,MAAM,YACNC,QAAS,kBA9BF,SAAMM,GAAN,iBAAAS,EAAAC,OAAA,kEAAAD,EAAA,MACEE,MAAM,qCAAD,OACeX,EAAKC,GADpB,sDADP,cACbW,EADa,kBAAAH,EAAA,MAIMG,EAAOC,QAJb,OAIbC,EAJa,OAKjBhB,EAASgB,EAAWC,QAAQ,IAC5BxC,IANiB,qCA8BQyC,CAAWhB,KAH5B,WAOA,uBACEiB,KAAMjB,EAAKI,YACXzB,UAAU,kBACV0B,MAAO,CACLC,gBAAiB,UACjBY,YAAa,UACbzB,MAAO,QAET0B,OAAO,SACPC,IAAI,uBATN,aAcF,yBAAKzC,UAAU,YACb,4BACE,uBACEsC,KAAMjB,EAAKI,YACXe,OAAO,SACPC,IAAI,uBAEHpB,EAAKjB,OAAS,KAGnB,2BACE,uBAAGJ,UAAU,2BACb,8BAAOqB,EAAKqB,cAAgB,IAF9B,YASV,OACE,yBAAK1C,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,2BACb,kDAEF,yBAAKA,UAAU,4BACZ2C,EAAUC,KAAI,SAACvB,EAAMwB,GAAP,OACb,kBAACzB,EAAD,CAAWZ,IAAKqC,EAAOxB,KAAMA,SAInC,kBAAC,EAAD,CAAgBzB,OAAQA,EAAQD,MAAOA,EAAOE,MAAOA,KCzE5CiD,MAVf,WACE,OACE,yBAAK9C,UAAU,WACb,6BAASA,UAAU,cACjB,kBAACgB,EAAD,SCIY+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6cd7c71c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nconst ModalComponent = ({ modal, toggle, movie }) => {\n  return (\n    <div>\n      <Modal isOpen={modal} toggle={toggle} className=\"modal-dialog\">\n        <ModalHeader toggle={toggle}>{movie.name}</ModalHeader>\n        <ModalBody>\n          <iframe\n            title={movie.name}\n            width=\"100%\"\n            height=\"315\"\n            src={`https://www.youtube.com/embed/${movie.key}`}\n            frameBorder=\"0\"\n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen\n          ></iframe>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={toggle}>\n            Đóng\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n};\n\nexport default ModalComponent;\n","import React, { useState } from 'react';\nimport movieData from '../assets/data.json';\nimport ModalComponent from '../components/ModalComponent.jsx';\nimport { Button } from 'reactstrap';\nexport default function MoviesList() {\n  const [modal, setModal] = useState(false);\n  const [movie, setMovie] = useState('');\n  const toggle = () => setModal(!modal);\n  const getTrailer = async item => {\n    let result = await fetch(\n      `http://api.themoviedb.org/3/movie/${item.id}/videos?api_key=b821b0506b4f9020cc6ac49377f48963`\n    );\n    let resultJson = await result.json();\n    setMovie(resultJson.results[0]);\n    toggle();\n  };\n  const MovieItem = ({ item }) => {\n    if (!item.id) {\n      console.log(item.driveFolder);\n    }\n    return (\n      <div className=\"movie-it\">\n        <div className=\"card\" style={{ backgroundColor: '#050A1A' }}>\n          <div className=\"movies-img\">\n            <img\n              src={\n                item.poster_path\n                  ? `https://image.tmdb.org/t/p/w600_and_h900_bestv2${item.poster_path}`\n                  : ''\n              }\n              className=\"card-img-top\"\n              alt={item.id}\n            />\n          </div>\n          <div className=\"movies-inner\">\n            <Button\n              className=\"mb-2\"\n              color=\"secondary\"\n              onClick={() => getTrailer(item)}\n            >\n              Trailer\n            </Button>\n            <a\n              href={item.driveFolder}\n              className=\"btn btn-primary\"\n              style={{\n                backgroundColor: '#cf2923',\n                borderColor: '#cf2923',\n                color: '#FFF'\n              }}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Xem phim\n            </a>\n          </div>\n          <div className=\"title-in\">\n            <h6>\n              <a\n                href={item.driveFolder}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {item.title || ''}\n              </a>\n            </h6>\n            <p>\n              <i className=\"fas fa-star movie-star\"></i>\n              <span>{item.vote_average || ''}</span> /10\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-12 text-center my-3\">\n          <h3>Danh sách phim</h3>\n        </div>\n        <div className=\"col-12 movies__list my-4\">\n          {movieData.map((item, index) => (\n            <MovieItem key={index} item={item} />\n          ))}\n        </div>\n      </div>\n      <ModalComponent toggle={toggle} modal={modal} movie={movie} />\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport MoviesList from './pages/MoviesList';\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <section className=\"main-panel\">\n        <MoviesList />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}